name: Build

on:
  workflow_call:
    inputs:
      upload-artifacts:
        description: 'Whether to upload artifacts'
        required: false
        default: true
        type: boolean
      artifact-prefix:
        description: 'Prefix for artifact names'
        required: false
        default: 'stardrift'
        type: string
      retention-days:
        description: 'Artifact retention days'
        required: false
        default: 90
        type: number

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: "Build ${{ matrix.platform.name }}"
    runs-on: ${{ matrix.platform.os }}
    permissions:
      contents: read
      id-token: write
      attestations: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: Linux-aarch64
            os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: Windows-aarch64
            os: windows-11-arm
            target: aarch64-pc-windows-msvc
          - name: macOS-x86_64
            os: macos-13
            target: x86_64-apple-darwin
          - name: macOS-aarch64
            os: macos-14
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        shell: bash
        run: |
          VERSION=$(cargo pkgid -p stardrift | cut -d# -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}

      - name: Build release
        run: |
          cargo build -p stardrift --release --target ${{ matrix.platform.target }} --all-features
        shell: bash

      - name: Create app bundle and DMG (macOS)
        if: runner.os == 'macOS'
        run: |
          # Create app bundle structure
          APP_NAME="Stardrift"
          BUNDLE_DIR="${APP_NAME}.app"
          mkdir -p "$BUNDLE_DIR/Contents/MacOS"
          mkdir -p "$BUNDLE_DIR/Contents/Resources"
          
          # Copy executable
          cp "target/${{ matrix.platform.target }}/release/stardrift" "$BUNDLE_DIR/Contents/MacOS/$APP_NAME"
          chmod +x "$BUNDLE_DIR/Contents/MacOS/$APP_NAME"
          
          # Create Info.plist using plutil commands
          PLIST_FILE="$BUNDLE_DIR/Contents/Info.plist"
          plutil -create xml1 "$PLIST_FILE"
          plutil -insert CFBundleInfoDictionaryVersion -string "6.0" "$PLIST_FILE"
          plutil -insert CFBundleDevelopmentRegion -string "en" "$PLIST_FILE"
          plutil -insert CFBundlePackageType -string "APPL" "$PLIST_FILE"
          plutil -insert CFBundleIdentifier -string "app.stardrift" "$PLIST_FILE"
          plutil -insert CFBundleExecutable -string "$APP_NAME" "$PLIST_FILE"
          plutil -insert CFBundleIconFile -string "AppIcon" "$PLIST_FILE"
          plutil -insert CFBundleDisplayName -string "$APP_NAME" "$PLIST_FILE"
          plutil -insert CFBundleName -string "$APP_NAME" "$PLIST_FILE"
          plutil -insert CFBundleVersion -string "${{ steps.get_version.outputs.version }}" "$PLIST_FILE"
          plutil -insert CFBundleShortVersionString -string "${{ steps.get_version.outputs.version }}" "$PLIST_FILE"
          plutil -insert NSHumanReadableCopyright -string "Copyright Â© 2025 Emily Strickland" "$PLIST_FILE"
          plutil -insert CFBundleSignature -string "????" "$PLIST_FILE"
          plutil -insert LSApplicationCategoryType -string "public.app-category.games" "$PLIST_FILE"
          plutil -insert LSMinimumSystemVersion -string "10.15" "$PLIST_FILE"
          plutil -insert NSHighResolutionCapable -bool true "$PLIST_FILE"
          plutil -insert NSPrincipalClass -string "NSApplication" "$PLIST_FILE"
          
          # Copy resources
          if [ -d "crates/stardrift/assets" ]; then
            cp -r "crates/stardrift/assets" "$BUNDLE_DIR/Contents/Resources/"
          fi
          if [ -d "configs" ]; then
            cp -r "configs" "$BUNDLE_DIR/Contents/Resources/"
          fi
          
          # Ad-hoc sign the app bundle
          codesign --force --deep --sign - "$BUNDLE_DIR"
          
          # Create a temporary directory for DMG contents
          DMG_DIR="dmg-contents"
          mkdir -p "$DMG_DIR"
          
          # Copy app bundle to DMG directory
          cp -r "$BUNDLE_DIR" "$DMG_DIR/"
          
          # Create Applications symlink
          ln -s /Applications "$DMG_DIR/Applications"
          
          # Create DMG from directory with app bundle and Applications symlink
          hdiutil create -volname "Stardrift" -srcfolder "$DMG_DIR" -ov -format UDZO stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.dmg
          
          # Clean up temporary directory
          rm -rf "$DMG_DIR"
          
          # Ad-hoc sign the DMG
          codesign --force --sign - stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.dmg

      - name: Package binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.platform.target }}/release
          # Ad-hoc sign the binary on macOS
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            codesign --force --sign - stardrift
          fi
          tar czf ../../../stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.tar.gz stardrift
          cd ../../..
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            shasum -a 256 stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.tar.gz > stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.tar.gz.sha256
          else
            sha256sum stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.tar.gz > stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.tar.gz.sha256
          fi

      - name: Package binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd target\${{ matrix.platform.target }}\release
          7z a ..\..\..\stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.zip stardrift.exe
          cd ..\..\..
          (Get-FileHash stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.zip -Algorithm SHA256).Hash | Out-File -FilePath stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.zip.sha256

      - uses: actions/upload-artifact@v4
        if: inputs.upload-artifacts
        with:
          name: ${{ inputs.artifact-prefix }}-${{ matrix.platform.target }}
          path: |
            stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.*
          if-no-files-found: error
          retention-days: ${{ inputs.retention-days }}

      - name: Attest build provenance
        if: inputs.upload-artifacts && inputs.artifact-prefix == 'stardrift'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.tar.gz
            stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.zip
            stardrift-${{ steps.get_version.outputs.version }}-${{ matrix.platform.target }}.dmg

  build-wasm:
    name: Build WebAssembly
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      attestations: write
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          VERSION=$(cargo pkgid -p stardrift | cut -d# -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - uses: Swatinem/rust-cache@v2

      - name: Install trunk
        uses: taiki-e/install-action@v2
        with:
          tool: trunk

      - name: Build WebAssembly
        run: |
          trunk build crates/stardrift/index.html

      - name: Package WebAssembly
        run: |
          cd dist
          tar czf ../stardrift-${{ steps.get_version.outputs.version }}-wasm.tar.gz *
          cd ..
          sha256sum stardrift-${{ steps.get_version.outputs.version }}-wasm.tar.gz > stardrift-${{ steps.get_version.outputs.version }}-wasm.tar.gz.sha256

      - uses: actions/upload-artifact@v4
        if: inputs.upload-artifacts
        with:
          name: ${{ inputs.artifact-prefix }}-wasm
          path: |
            stardrift-${{ steps.get_version.outputs.version }}-wasm.tar.gz
            stardrift-${{ steps.get_version.outputs.version }}-wasm.tar.gz.sha256
          if-no-files-found: error
          retention-days: ${{ inputs.retention-days }}

      - name: Attest WebAssembly build provenance
        if: inputs.upload-artifacts && inputs.artifact-prefix == 'stardrift'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: stardrift-${{ steps.get_version.outputs.version }}-wasm.tar.gz
