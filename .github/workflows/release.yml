name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

jobs:
  ci:
    name: CI
    uses: ./.github/workflows/ci.yml
    permissions:
      contents: read
      issues: write
      checks: write

  build:
    name: Build release
    needs: ci
    uses: ./.github/workflows/build.yml
    permissions:
      contents: read
      id-token: write
      attestations: write

  release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: List artifacts
        run: ls -la artifacts/

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Extract the section for this version from CHANGELOG.md
          # This looks for the version header and extracts everything until the next version header
          CHANGELOG_CONTENT=$(awk -v ver="$VERSION" '
            /^## \[/ { 
              if (found) exit; 
              if ($2 == "["ver"]") found=1; 
              next 
            }
            found { print }
          ' CHANGELOG.md)
          
          # Handle multiline content for GitHub Actions output
          if [ -n "$CHANGELOG_CONTENT" ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            # Use delimiter for multiline output
            echo "content<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "content=See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/v$VERSION/CHANGELOG.md) for details." >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          generate_release_notes: true
          draft: false
          prerelease: false
          name: Stardrift v${{ steps.version.outputs.version }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.content }}
            
            ## Downloads
            
            ### Desktop Packages
            
            - **macOS**
              - Intel: `stardrift-${{ steps.version.outputs.version }}-x86_64-apple-darwin.dmg`
              - Apple Silicon: `stardrift-${{ steps.version.outputs.version }}-aarch64-apple-darwin.dmg`
            
            ### Portable Binaries
            
            - **Linux**
              - x86_64: `stardrift-${{ steps.version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz`
              - ARM64: `stardrift-${{ steps.version.outputs.version }}-aarch64-unknown-linux-gnu.tar.gz`
            - **Windows**
              - x86_64: `stardrift-${{ steps.version.outputs.version }}-x86_64-pc-windows-msvc.zip`
              - ARM64: `stardrift-${{ steps.version.outputs.version }}-aarch64-pc-windows-msvc.zip`
            - **macOS**
              - Intel: `stardrift-${{ steps.version.outputs.version }}-x86_64-apple-darwin.tar.gz`
              - Apple Silicon: `stardrift-${{ steps.version.outputs.version }}-aarch64-apple-darwin.tar.gz`
            
            ### WebAssembly
            
            - `stardrift-${{ steps.version.outputs.version }}-wasm.tar.gz` - Web build with trail rendering
            - **[View in browser](https://stardrift.live/)** - Try Stardrift directly in your web browser
            
            All downloads include SHA256 checksums for verification.
            
            ### Security Notices
            
            #### macOS
            
            The macOS binaries are ad-hoc signed but not notarized. On macOS Sequoia (15.x) and later:
            
            **Recommended method:**
            
            1. **First attempt**: Double-click the app/DMG (or run the binary) - you'll see a warning that it cannot be opened
            2. **Allow the app**: Go to System Settings → Privacy & Security
            3. **Scroll down**: Find the "Open Anyway" button for Stardrift (appears for ~1 hour after first attempt)
            4. **Confirm**: Click "Open Anyway", enter your password, then click "Open" in the final dialog
            
            **Alternative for command-line users**:
            
            ```sh
            sudo xattr -dr com.apple.quarantine /path/to/stardrift
            ```
            
            Note: This requires your admin password. If it fails with "Operation not permitted", grant Terminal Full Disk Access in System Settings → Privacy & Security → Full Disk Access
            
            Note: The right-click → "Open" bypass no longer works in macOS Sequoia.
            
            #### Windows
            
            Windows SmartScreen may warn about the executable. To run:
            1. Click "More info" on the SmartScreen dialog
            2. Click "Run anyway"

  deploy:
    name: Deploy to GitHub Pages
    needs: release
    uses: ./.github/workflows/deploy.yml
    permissions:
      contents: read
      pages: write
      id-token: write
    with:
      version: ${{ needs.release.outputs.version }}
